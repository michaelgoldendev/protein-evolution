using LinearAlgebra
using Random
push!(LOAD_PATH,@__DIR__)
using CommonUtils

Q = [-140.574 0.0086282 0.00740594 0.0208465 0.00988252 0.0967085 2.57192 0.00352555 9.08787 0.0724538 0.0187121 11.9069 0.0057837 1.48274 0.0349186 0.00131167 0.00598762 5.31068 0.00910418 0.0261531 5.94602 3.19157 0.415879 0.0121403 0.00991792 0.0232783 0.0131186 0.799023 99.4715 0.0102052; 0.0086282 -247.414 13.6505 0.757156 13.0114 2.41661 6.42683 26.1124 12.3672 23.9615 0.104086 0.00391435 0.00159781 5.71701 4.21835 0.368229 0.541132 0.000911566 9.89238 7.80561 42.3933 55.1426 14.9717 0.00913472 0.588415 0.0206078 0.600717 0.603303 5.65976 0.0591471; 0.00740594 13.6505 -65.417 0.000830542 0.00176802 0.0061509 4.92717 0.975183 4.8537 10.5937 0.0164356 0.00751215 0.00311283 0.441066 0.927658 4.2808 0.0146819 0.00198678 0.00506694 0.00279804 12.7188 9.59095 0.0696161 0.0223486 0.00459463 0.0135391 0.300438 0.0176172 1.95785 0.00385416; 0.0208465 0.757156 0.000830542 -101.7 0.739804 0.00383613 6.63427 0.00517349 0.000813587 14.5295 0.040337 1.2554 5.27493 0.000514006 0.548 17.3914 0.00349945 0.0481063 0.00279991 0.000951894 0.000838568 12.921 0.156591 0.0387767 9.92076 0.0122626 13.5489 2.92012 0.00849953 14.9137; 0.00988252 13.0114 0.00176802 0.739804 -39.274 0.00258581 4.34007 1.60016 1.82479 1.4485 0.0240083 0.00439882 0.00390932 0.00125935 0.589398 2.6899 0.00619293 0.29853 0.503296 0.00528757 11.995 0.00444559 0.0296521 0.0557309 0.00360799 0.0109011 0.00172909 0.0602629 0.004679 0.00294605; 0.0967085 2.41661 0.0061509 0.00383613 0.00258581 -222.014 5.31547 24.0043 0.263513 70.925 0.0864873 7.17171 0.0573613 0.0263041 0.037965 31.8751 0.016159 14.8852 0.0209743 0.00606893 3.8374 0.183296 0.354583 0.20235 7.9856 0.0256559 0.000438288 0.543823 39.855 11.8085; 2.57192 6.42683 4.92717 6.63427 4.34007 5.31547 -171.349 4.42204 8.48297 15.3149 4.40181 0.0130952 0.0145394 9.9189 4.68378 12.9609 0.000119528 4.11425 3.98325 3.7274 18.6787 0.0223493 0.137433 3.29361 0.0192142 2.86341 4.86206 33.5507 1.72874 3.9388; 0.00352555 26.1124 0.975183 0.00517349 1.60016 24.0043 4.42204 -114.872 13.6844 0.00756339 1.03785 2.42449 0.00113585 0.00628277 9.11431 0.000712977 0.347198 0.0151165 0.00309927 0.0399195 0.804261 14.5888 0.144255 0.0062206 0.0106487 2.80784 0.00724235 0.0806726 4.52643 8.09049; 9.08787 12.3672 4.8537 0.000813587 1.82479 0.263513 8.48297 13.6844 -253.586 23.7421 10.6232 5.58937 106.198 5.14486 0.00351402 1.73515 0.018827 0.00104701 4.96082 0.00684453 9.67971 13.0839 0.228833 0.0287194 0.0116803 14.6914 4.54809 2.71591 0.00467726 0.0037338; 0.0724538 23.9615 10.5937 14.5295 1.4485 70.925 15.3149 0.00756339 23.7421 -362.994 0.112835 0.0409477 0.018679 3.29536 0.00541894 15.4702 0.0312606 0.011613 8.7222 9.5531 36.4827 18.2659 0.675391 84.875 3.45735 0.0500122 1.82665 0.860169 12.0309 6.61333; 0.0187121 0.104086 0.0164356 0.040337 0.0240083 0.0864873 4.40181 1.03785 10.6232 0.112835 -45.135 0.0518218 0.006444 0.0270826 0.0810134 6.2315 0.0662531 0.0361638 0.0212755 0.23478 0.512755 0.0214956 0.142668 10.8282 0.0227751 0.00573287 0.0397496 9.37517 0.945967 0.0183555; 11.9069 0.00391435 0.00751215 1.2554 0.00439882 7.17171 0.0130952 2.42449 5.58937 0.0409477 0.0518218 -66.1778 0.0168918 0.00196472 10.8657 0.0074876 16.4052 0.0418122 0.938414 0.0334232 2.43784 0.00479333 0.0221441 0.0100111 0.00907657 0.0431685 3.63876 0.162452 3.06315 0.0058665; 0.0057837 0.00159781 0.00311283 5.27493 0.00390932 0.0573613 0.0145394 0.00113585 106.198 0.018679 0.006444 0.0168918 -127.686 3.24631 0.0145925 0.10248 0.34857 0.0280247 0.00412116 1.04444 5.87177 4.99012 0.0920327 0.0105471 0.0282871 0.00817466 0.0321256 0.242801 0.00878283 0.0101221; 1.48274 5.71701 0.441066 0.000514006 0.00125935 0.0263041 9.9189 0.00628277 5.14486 3.29536 0.0270826 0.00196472 3.24631 -72.756 2.51839 0.00586782 0.0148645 0.011457 3.93209 12.037 0.510868 0.000732403 0.0530458 0.00310149 0.872805 0.0823769 8.00048 0.213154 0.00587812 15.1842; 0.0349186 4.21835 0.927658 0.548 0.589398 0.037965 4.68378 9.11431 0.00351402 0.00541894 0.0810134 10.8657 0.0145925 2.51839 -67.4136 13.5074 0.00775264 0.00592612 0.00768945 0.00997091 5.66462 5.62157 0.266233 0.235871 1.00799 5.9642 1.40638 0.0383688 0.0223108 0.00427904; 0.00131167 0.368229 4.2808 17.3914 2.6899 31.8751 12.9609 0.000712977 1.73515 15.4702 6.2315 0.0074876 0.10248 0.00586782 13.5074 -190.862 0.0197123 2.62128 2.79681 0.00233769 0.000234536 0.36608 0.0758037 0.010273 10.7459 0.00483682 47.2877 5.25223 0.00727386 15.0428; 0.00598762 0.541132 0.0146819 0.00349945 0.00619293 0.016159 0.000119528 0.347198 0.018827 0.0312606 0.0662531 16.4052 0.34857 0.0148645 0.00775264 0.0197123 -103.335 0.0123325 0.00240886 0.00371637 2.58978 0.800353 2.56262 1.83485 67.6146 0.0613197 4.47064 1.20594 0.107011 4.22208; 5.31068 0.000911566 0.00198678 0.0481063 0.29853 14.8852 4.11425 0.0151165 0.00104701 0.011613 0.0361638 0.0418122 0.0280247 0.011457 0.00592612 2.62128 0.0123325 -124.639 0.756777 0.0033511 0.00520323 0.191444 48.6741 26.0412 10.6047 10.7819 0.0210022 0.0943489 0.0152334 0.00534424; 0.00910418 9.89238 0.00506694 0.00279991 0.503296 0.0209743 3.98325 0.00309927 4.96082 8.7222 0.0212755 0.938414 0.00412116 3.93209 0.00768945 2.79681 0.00240886 0.756777 -53.2465 0.00516884 8.3909 5.31679 0.0674946 0.9985 0.0185137 0.0155899 0.00463679 0.0899116 1.77117 0.0052102; 0.0261531 7.80561 0.00279804 0.000951894 0.00528757 0.00606893 3.7274 0.0399195 0.00684453 9.5531 0.23478 0.0334232 1.04444 12.037 0.00997091 0.00233769 0.00371637 0.0033511 0.00516884 -39.097 0.0163273 2.69808 0.329791 0.0605533 0.0174794 0.224124 1.06185 0.0295368 0.106531 0.00442396; 5.94602 42.3933 12.7188 0.000838568 11.995 3.8374 18.6787 0.804261 9.67971 36.4827 0.512755 2.43784 5.87177 0.510868 5.66462 0.000234536 2.58978 0.00520323 8.3909 0.0163273 -198.264 18.2653 1.54766 0.0119101 0.00139544 0.00166988 9.542 0.0288582 0.326284 0.00192729; 3.19157 55.1426 9.59095 12.921 0.00444559 0.183296 0.0223493 14.5888 13.0839 18.2659 0.0214956 0.00479333 4.99012 0.000732403 5.62157 0.36608 0.800353 0.191444 5.31679 2.69808 18.2653 -194.844 0.0181602 0.00146745 6.62783 0.126682 0.0404064 22.6404 0.111263 0.00638079; 0.415879 14.9717 0.0696161 0.156591 0.0296521 0.354583 0.137433 0.144255 0.228833 0.675391 0.142668 0.0221441 0.0920327 0.0530458 0.266233 0.0758037 2.56262 48.6741 0.0674946 0.329791 1.54766 0.0181602 -72.5276 0.00494869 0.094642 0.0558226 0.136814 0.267152 0.814833 0.117714; 0.0121403 0.00913472 0.0223486 0.0387767 0.0557309 0.20235 3.29361 0.0062206 0.0287194 84.875 10.8282 0.0100111 0.0105471 0.00310149 0.235871 0.010273 1.83485 26.0412 0.9985 0.0605533 0.0119101 0.00146745 0.00494869 -162.065 0.00890907 22.4691 0.049646 0.146983 0.00491336 10.79; 0.00991792 0.588415 0.00459463 9.92076 0.00360799 7.9856 0.0192142 0.0106487 0.0116803 3.45735 0.0227751 0.00907657 0.0282871 0.872805 1.00799 10.7459 67.6146 10.6047 0.0185137 0.0174794 0.00139544 6.62783 0.094642 0.00890907 -138.632 0.0111059 8.53229 0.0853791 10.3124 0.00438356; 0.0232783 0.0206078 0.0135391 0.0122626 0.0109011 0.0256559 2.86341 2.80784 14.6914 0.0500122 0.00573287 0.0431685 0.00817466 0.0823769 5.9642 0.00483682 0.0613197 10.7819 0.0155899 0.224124 0.00166988 0.126682 0.0558226 22.4691 0.0111059 -91.6098 25.8332 0.0933382 0.00317377 5.30542; 0.0131186 0.600717 0.300438 13.5489 0.00172909 0.000438288 4.86206 0.00724235 4.54809 1.82665 0.0397496 3.63876 0.0321256 8.00048 1.40638 47.2877 4.47064 0.0210022 0.00463679 1.06185 9.542 0.0404064 0.136814 0.049646 8.53229 25.8332 -163.554 0.0373965 5.43983 22.2695; 0.799023 0.603303 0.0176172 2.92012 0.0602629 0.543823 33.5507 0.0806726 2.71591 0.860169 9.37517 0.162452 0.242801 0.213154 0.0383688 5.25223 1.20594 0.0943489 0.0899116 0.0295368 0.0288582 22.6404 0.267152 0.146983 0.0853791 0.0933382 0.0373965 -82.1807 0.0127609 0.0128785; 99.4715 5.65976 1.95785 0.00849953 0.004679 39.855 1.72874 4.52643 0.00467726 12.0309 0.945967 3.06315 0.00878283 0.00587812 0.0223108 0.00727386 0.107011 0.0152334 1.77117 0.106531 0.326284 0.111263 0.814833 0.00491336 10.3124 0.00317377 5.43983 0.0127609 -207.793 19.4667; 0.0102052 0.0591471 0.00385416 14.9137 0.00294605 11.8085 3.9388 8.09049 0.0037338 6.61333 0.0183555 0.0058665 0.0101221 15.1842 0.00427904 15.0428 4.22208 0.00534424 0.0052102 0.00442396 0.00192729 0.00638079 0.117714 10.79 0.00438356 5.30542 22.2695 0.0128785 19.4667 -137.922]
Q *= 0.01
decomposition = eigen(Q)
D, V = decomposition.values, decomposition.vectors
Vi = inv(V)
bigT = 1.0
P = V*Diagonal(exp.(D*bigT))*Vi

function J(D,Q::Array{Float64,2}, a::Int, j::Int, bigT::Float64)
	if abs(D[j]-Q[a,a]) < 1e-20
		return bigT*exp(bigT*D[j])
	else
		return (exp(bigT*D[j]) - exp(Q[a,a]*bigT))/(D[j]-Q[a,a])
	end
end

function getfi(D,Q::Array{Float64,2}, P::Array{Float64,2}, U::Array{Float64,2}, Uinv::Array{Float64,2}, a::Int, b::Int, i::Int, littlet::Float64, bigT::Float64)
	z = 0.0
	for j=1:size(Q,1)
		z += U[i,j]*Uinv[j,b]*exp(bigT*D[j])*exp(-littlet*(D[j]-Q[a,a]))
	end
	tempP = V*Diagonal(exp.(D*bigT))*Vi
	return (Q[a,i]/tempP[a,b])*z
end

function getpi(D,Q::Array{Float64,2}, P::Array{Float64,2}, U::Array{Float64,2}, Uinv::Array{Float64,2}, a::Int, b::Int, i::Int, bigT::Float64)
	z = 0.0
	for j=1:size(Q,1)
		z += U[i,j]*Uinv[j,b]*J(D,Q,a,j,bigT)
	end
	tempP = V*Diagonal(exp.(D*bigT))*Vi
	return (Q[a,i]/tempP[a,b])*z
end

function findu(D,Q::Array{Float64,2}, P::Array{Float64,2}, U::Array{Float64,2}, Uinv::Array{Float64,2}, a::Int, b::Int, i::Int, bigT::Float64, u::Float64)
	startt = 0.0
	endt = bigT
	midt = startt + (endt-startt)/2.0
	v = getpi(D,Q,P,V,Vi,a,b,i,bigT)
	for iter=1:200
		midv = getpi(D,Q,P,V,Vi,a,b,i,midt)/v
		#println(iter,"\t",midv, "\t", v, "\t", startt, "\t", endt,"\t",midt)
		if abs(midv-u) < 1e-12
			break
		elseif midv > u
			endt = midt
		else
			startt = midt
		end
		midt = startt + (endt-startt)/2.0		
	end
	return midt
end



println(J(D,Q,1,20,bigT))
println(getfi(D,Q,P,V,Vi,1,20,5,bigT/2.0,bigT))

findu(D,Q,P,V,Vi,1,20,5,bigT,0.1)

function samplepath(rng::AbstractRNG, D,Q::Array{Float64,2}, P::Array{Float64,2}, U::Array{Float64,2}, Uinv::Array{Float64,2}, starta::Int, startb::Int, bigT::Float64)
	alphabet = size(Q,1)
	a = starta
	b = startb
	remainingT = bigT
	path = Int[a]
	time = Float64[0.0]
	while true
		println(path,time, getpi(D,Q, P, U, Uinv, a, b, a, remainingT))
		if a == b && getpi(D,Q, P, U, Uinv, a, b, a, remainingT) > rand(rng)
			return path,time
		else
			v = zeros(Float64, alphabet)
			for i=1:alphabet
				if i != a
					v[i] = getpi(D,Q, P, U, Uinv, a, b, i, remainingT)
				end
			end
			i = CommonUtils.sample(rng, v)
			newt = findu(D,Q,P,V,Vi,a,b,i,remainingT, rand(rng))
			a = i
			push!(path, a)
			push!(time, time[end]+newt)		
			remainingT = bigT - time[end]
		end
	end
	return path, time
end
rng = MersenneTwister(100)
println(samplepath(rng,D,Q,P,V,Vi,1,20,1.0))
#=
for x=0.0:0.1:1.0
	println(findu(D,Q,P,V,Vi,1,20,5,x))
end=#

#=
using Distributed
addprocs(4)
@everywhere push!(LOAD_PATH,@__DIR__)
@everywhere using CommonUtils
@everywhere using Random



@everywhere function do_work(results::RemoteChannel)
		rng = Random.MersenneTwister(100)
	 	A = [-140.574 0.0086282 0.00740594 0.0208465 0.00988252 0.0967085 2.57192 0.00352555 9.08787 0.0724538 0.0187121 11.9069 0.0057837 1.48274 0.0349186 0.00131167 0.00598762 5.31068 0.00910418 0.0261531 5.94602 3.19157 0.415879 0.0121403 0.00991792 0.0232783 0.0131186 0.799023 99.4715 0.0102052; 0.0086282 -247.414 13.6505 0.757156 13.0114 2.41661 6.42683 26.1124 12.3672 23.9615 0.104086 0.00391435 0.00159781 5.71701 4.21835 0.368229 0.541132 0.000911566 9.89238 7.80561 42.3933 55.1426 14.9717 0.00913472 0.588415 0.0206078 0.600717 0.603303 5.65976 0.0591471; 0.00740594 13.6505 -65.417 0.000830542 0.00176802 0.0061509 4.92717 0.975183 4.8537 10.5937 0.0164356 0.00751215 0.00311283 0.441066 0.927658 4.2808 0.0146819 0.00198678 0.00506694 0.00279804 12.7188 9.59095 0.0696161 0.0223486 0.00459463 0.0135391 0.300438 0.0176172 1.95785 0.00385416; 0.0208465 0.757156 0.000830542 -101.7 0.739804 0.00383613 6.63427 0.00517349 0.000813587 14.5295 0.040337 1.2554 5.27493 0.000514006 0.548 17.3914 0.00349945 0.0481063 0.00279991 0.000951894 0.000838568 12.921 0.156591 0.0387767 9.92076 0.0122626 13.5489 2.92012 0.00849953 14.9137; 0.00988252 13.0114 0.00176802 0.739804 -39.274 0.00258581 4.34007 1.60016 1.82479 1.4485 0.0240083 0.00439882 0.00390932 0.00125935 0.589398 2.6899 0.00619293 0.29853 0.503296 0.00528757 11.995 0.00444559 0.0296521 0.0557309 0.00360799 0.0109011 0.00172909 0.0602629 0.004679 0.00294605; 0.0967085 2.41661 0.0061509 0.00383613 0.00258581 -222.014 5.31547 24.0043 0.263513 70.925 0.0864873 7.17171 0.0573613 0.0263041 0.037965 31.8751 0.016159 14.8852 0.0209743 0.00606893 3.8374 0.183296 0.354583 0.20235 7.9856 0.0256559 0.000438288 0.543823 39.855 11.8085; 2.57192 6.42683 4.92717 6.63427 4.34007 5.31547 -171.349 4.42204 8.48297 15.3149 4.40181 0.0130952 0.0145394 9.9189 4.68378 12.9609 0.000119528 4.11425 3.98325 3.7274 18.6787 0.0223493 0.137433 3.29361 0.0192142 2.86341 4.86206 33.5507 1.72874 3.9388; 0.00352555 26.1124 0.975183 0.00517349 1.60016 24.0043 4.42204 -114.872 13.6844 0.00756339 1.03785 2.42449 0.00113585 0.00628277 9.11431 0.000712977 0.347198 0.0151165 0.00309927 0.0399195 0.804261 14.5888 0.144255 0.0062206 0.0106487 2.80784 0.00724235 0.0806726 4.52643 8.09049; 9.08787 12.3672 4.8537 0.000813587 1.82479 0.263513 8.48297 13.6844 -253.586 23.7421 10.6232 5.58937 106.198 5.14486 0.00351402 1.73515 0.018827 0.00104701 4.96082 0.00684453 9.67971 13.0839 0.228833 0.0287194 0.0116803 14.6914 4.54809 2.71591 0.00467726 0.0037338; 0.0724538 23.9615 10.5937 14.5295 1.4485 70.925 15.3149 0.00756339 23.7421 -362.994 0.112835 0.0409477 0.018679 3.29536 0.00541894 15.4702 0.0312606 0.011613 8.7222 9.5531 36.4827 18.2659 0.675391 84.875 3.45735 0.0500122 1.82665 0.860169 12.0309 6.61333; 0.0187121 0.104086 0.0164356 0.040337 0.0240083 0.0864873 4.40181 1.03785 10.6232 0.112835 -45.135 0.0518218 0.006444 0.0270826 0.0810134 6.2315 0.0662531 0.0361638 0.0212755 0.23478 0.512755 0.0214956 0.142668 10.8282 0.0227751 0.00573287 0.0397496 9.37517 0.945967 0.0183555; 11.9069 0.00391435 0.00751215 1.2554 0.00439882 7.17171 0.0130952 2.42449 5.58937 0.0409477 0.0518218 -66.1778 0.0168918 0.00196472 10.8657 0.0074876 16.4052 0.0418122 0.938414 0.0334232 2.43784 0.00479333 0.0221441 0.0100111 0.00907657 0.0431685 3.63876 0.162452 3.06315 0.0058665; 0.0057837 0.00159781 0.00311283 5.27493 0.00390932 0.0573613 0.0145394 0.00113585 106.198 0.018679 0.006444 0.0168918 -127.686 3.24631 0.0145925 0.10248 0.34857 0.0280247 0.00412116 1.04444 5.87177 4.99012 0.0920327 0.0105471 0.0282871 0.00817466 0.0321256 0.242801 0.00878283 0.0101221; 1.48274 5.71701 0.441066 0.000514006 0.00125935 0.0263041 9.9189 0.00628277 5.14486 3.29536 0.0270826 0.00196472 3.24631 -72.756 2.51839 0.00586782 0.0148645 0.011457 3.93209 12.037 0.510868 0.000732403 0.0530458 0.00310149 0.872805 0.0823769 8.00048 0.213154 0.00587812 15.1842; 0.0349186 4.21835 0.927658 0.548 0.589398 0.037965 4.68378 9.11431 0.00351402 0.00541894 0.0810134 10.8657 0.0145925 2.51839 -67.4136 13.5074 0.00775264 0.00592612 0.00768945 0.00997091 5.66462 5.62157 0.266233 0.235871 1.00799 5.9642 1.40638 0.0383688 0.0223108 0.00427904; 0.00131167 0.368229 4.2808 17.3914 2.6899 31.8751 12.9609 0.000712977 1.73515 15.4702 6.2315 0.0074876 0.10248 0.00586782 13.5074 -190.862 0.0197123 2.62128 2.79681 0.00233769 0.000234536 0.36608 0.0758037 0.010273 10.7459 0.00483682 47.2877 5.25223 0.00727386 15.0428; 0.00598762 0.541132 0.0146819 0.00349945 0.00619293 0.016159 0.000119528 0.347198 0.018827 0.0312606 0.0662531 16.4052 0.34857 0.0148645 0.00775264 0.0197123 -103.335 0.0123325 0.00240886 0.00371637 2.58978 0.800353 2.56262 1.83485 67.6146 0.0613197 4.47064 1.20594 0.107011 4.22208; 5.31068 0.000911566 0.00198678 0.0481063 0.29853 14.8852 4.11425 0.0151165 0.00104701 0.011613 0.0361638 0.0418122 0.0280247 0.011457 0.00592612 2.62128 0.0123325 -124.639 0.756777 0.0033511 0.00520323 0.191444 48.6741 26.0412 10.6047 10.7819 0.0210022 0.0943489 0.0152334 0.00534424; 0.00910418 9.89238 0.00506694 0.00279991 0.503296 0.0209743 3.98325 0.00309927 4.96082 8.7222 0.0212755 0.938414 0.00412116 3.93209 0.00768945 2.79681 0.00240886 0.756777 -53.2465 0.00516884 8.3909 5.31679 0.0674946 0.9985 0.0185137 0.0155899 0.00463679 0.0899116 1.77117 0.0052102; 0.0261531 7.80561 0.00279804 0.000951894 0.00528757 0.00606893 3.7274 0.0399195 0.00684453 9.5531 0.23478 0.0334232 1.04444 12.037 0.00997091 0.00233769 0.00371637 0.0033511 0.00516884 -39.097 0.0163273 2.69808 0.329791 0.0605533 0.0174794 0.224124 1.06185 0.0295368 0.106531 0.00442396; 5.94602 42.3933 12.7188 0.000838568 11.995 3.8374 18.6787 0.804261 9.67971 36.4827 0.512755 2.43784 5.87177 0.510868 5.66462 0.000234536 2.58978 0.00520323 8.3909 0.0163273 -198.264 18.2653 1.54766 0.0119101 0.00139544 0.00166988 9.542 0.0288582 0.326284 0.00192729; 3.19157 55.1426 9.59095 12.921 0.00444559 0.183296 0.0223493 14.5888 13.0839 18.2659 0.0214956 0.00479333 4.99012 0.000732403 5.62157 0.36608 0.800353 0.191444 5.31679 2.69808 18.2653 -194.844 0.0181602 0.00146745 6.62783 0.126682 0.0404064 22.6404 0.111263 0.00638079; 0.415879 14.9717 0.0696161 0.156591 0.0296521 0.354583 0.137433 0.144255 0.228833 0.675391 0.142668 0.0221441 0.0920327 0.0530458 0.266233 0.0758037 2.56262 48.6741 0.0674946 0.329791 1.54766 0.0181602 -72.5276 0.00494869 0.094642 0.0558226 0.136814 0.267152 0.814833 0.117714; 0.0121403 0.00913472 0.0223486 0.0387767 0.0557309 0.20235 3.29361 0.0062206 0.0287194 84.875 10.8282 0.0100111 0.0105471 0.00310149 0.235871 0.010273 1.83485 26.0412 0.9985 0.0605533 0.0119101 0.00146745 0.00494869 -162.065 0.00890907 22.4691 0.049646 0.146983 0.00491336 10.79; 0.00991792 0.588415 0.00459463 9.92076 0.00360799 7.9856 0.0192142 0.0106487 0.0116803 3.45735 0.0227751 0.00907657 0.0282871 0.872805 1.00799 10.7459 67.6146 10.6047 0.0185137 0.0174794 0.00139544 6.62783 0.094642 0.00890907 -138.632 0.0111059 8.53229 0.0853791 10.3124 0.00438356; 0.0232783 0.0206078 0.0135391 0.0122626 0.0109011 0.0256559 2.86341 2.80784 14.6914 0.0500122 0.00573287 0.0431685 0.00817466 0.0823769 5.9642 0.00483682 0.0613197 10.7819 0.0155899 0.224124 0.00166988 0.126682 0.0558226 22.4691 0.0111059 -91.6098 25.8332 0.0933382 0.00317377 5.30542; 0.0131186 0.600717 0.300438 13.5489 0.00172909 0.000438288 4.86206 0.00724235 4.54809 1.82665 0.0397496 3.63876 0.0321256 8.00048 1.40638 47.2877 4.47064 0.0210022 0.00463679 1.06185 9.542 0.0404064 0.136814 0.049646 8.53229 25.8332 -163.554 0.0373965 5.43983 22.2695; 0.799023 0.603303 0.0176172 2.92012 0.0602629 0.543823 33.5507 0.0806726 2.71591 0.860169 9.37517 0.162452 0.242801 0.213154 0.0383688 5.25223 1.20594 0.0943489 0.0899116 0.0295368 0.0288582 22.6404 0.267152 0.146983 0.0853791 0.0933382 0.0373965 -82.1807 0.0127609 0.0128785; 99.4715 5.65976 1.95785 0.00849953 0.004679 39.855 1.72874 4.52643 0.00467726 12.0309 0.945967 3.06315 0.00878283 0.00587812 0.0223108 0.00727386 0.107011 0.0152334 1.77117 0.106531 0.326284 0.111263 0.814833 0.00491336 10.3124 0.00317377 5.43983 0.0127609 -207.793 19.4667; 0.0102052 0.0591471 0.00385416 14.9137 0.00294605 11.8085 3.9388 8.09049 0.0037338 6.61333 0.0183555 0.0058665 0.0101221 15.1842 0.00427904 15.0428 4.22208 0.00534424 0.0052102 0.00442396 0.00192729 0.00638079 0.117714 10.79 0.00438356 5.30542 22.2695 0.0128785 19.4667 -137.922]
		A *= 0.01
		x0 = 1
		xt = 30
		path = Int[]
		times = Float64[]
		Q = A
		R = copy(Q)
		for i=1:size(Q,1)
			R[i,i] = 0.0
		end
		S = copy(R)
		for i=1:size(Q,1)
			s = 0.0
			for j=1:size(Q,2)
				s += S[i,j]
			end
			for j=1:size(Q,2)
				S[i,j] /= s
			end
		end

		println("HERE")
		while true
			res = take!(results)
			println("A",res[1])
			if res[1]
				put!(results, res)
				break
			end

			path = Int[x0]
			times = Float64[0.0]
			totalt = 0.0
			success = true
			if x0 != xt
				r = rand(rng)
				totalt += log(1.0-r*(1.0-exp(Q[path[end],path[end]])))/Q[path[end],path[end]]
				push!(path, sample(rng, S[path[end],:]))
				push!(times, totalt)
			end
			count = 0
			while true
				if count > 1000000
					success = false
					break
				end

				r = rand(rng)
				samplet = log(1.0-r)/Q[path[end],path[end]]
				totalt += samplet
				if totalt > 1.0
					break
				end
				push!(path, sample(rng, S[path[end],:]))
				push!(times, totalt)
				count += 1
			end
			if path[end] == xt
				break
			end
			if success
				put!(results, (success, path, times))
				break
			else
				put!(results, (false,Int[],Float64[]))
			end
		end
	end

const results = RemoteChannel(()->Channel{Tuple}(1))
function  parallel_modifiedrejectionsampling()
	global results
	for i=1:4
		put!(results, (false,Int[],Float64[]))
	end
	for p in workers() # start tasks on the workers to process requests in parallel
	   
       remote_do(do_work, p,results)
   end
end


parallel_modifiedrejectionsampling()
=#